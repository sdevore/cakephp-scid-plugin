<?php

    namespace Scid\View\Helper;

    use Cake\Core\Configure;
    use Cake\View\Helper;
    use Cake\View\View;

    /**
     * Payment helper
     *
     * @property \Cake\View\Helper\UrlHelper  $Url
     * @property \Scid\View\Helper\HtmlHelper $Html
     * @property \Scid\View\Helper\FormHelper $Form
     */
    class PaymentHelper extends Helper
    {

        public $helpers = ['Url', 'Scid.Html', 'Scid.Form'];
        /**
         * Default configuration.
         *
         * @var array
         */
        protected $_defaultPaymentConfig = [
            'type'    => 'AuthorizeDotNet',
            'credentials' => 'default',
            'sandbox' => TRUE,
            'payment' => [
                'fields' => [
                    [
                        'cardNumber' => 'cardNumber', 'month' => 'month', 'year' => 'year',
                        'zip'        => 'zip', 'cardCode' => 'cardCode', 'fullName' => 'fullName',
                        'form_id'    => 'form_id',
                    ],
                ],
            ],
        ];

        protected $_sandbox = TRUE;
        protected $_options = [];

        public function initialize(array $config) {
            parent::initialize($config); // TODO: Change the autogenerated stub
            $this->_initialize($config);
        }

        public function _initialize(array $config) {
            $scid = Configure::read('Scid.payment');

            if (!empty($config['credentials'])) {
                $this->_credentials = $scid['credentials'];
            }
            $type = $this->_defaultPaymentConfig['type'];
            if (!empty($scid['default_type'])) {
                $type = $scid['default_type'];
            }
            if (!empty($config['type'])) {
                $type = $config['type'];
            }
            if (!empty($scid[$this->_credentials][$type])) {
                $this->_options = $scid[$this->_credentials][$type];
            } else {
                $this->_options = $scid[$this->_defaultPaymentConfig['credentials']][$type];
            }
            if (isset($scid['sandbox'])) {
                $this->_sandbox = $scid['sandbox'];
            }
            if (!empty($config['sandbox'])) {
                $this->_sandbox = $config['sandbox'];
            }
        }

        public function button($title, $options) {

            $this->Form->unlockField('dataDescriptor');
            $this->Form->unlockField('dataValue');
            if (empty($options['payment'])) {
                $payment = $this->_defaultPaymentConfig['payment'];
            }
            else {
                $payment = $options['payment'];
            }

            if (empty($payment['fields'])) {
                $fields = $this->_defaultPaymentConfig['payment']['fields'];
            }
            else {
                $fields = $payment['fields'];
            }
            unset($options['payment']);

            $client_key = $this->_options['client_key'];
            $api_login = $this->_options['login_id'];
            $cardNumber = $this->Form->domId($fields['cardNumber']);
            $fullName = $this->Form->domId($fields['fullName']);
            $month = $this->Form->domId($fields['month']);
            $year = $this->Form->domId($fields['year']);
            $zip = $this->Form->domId($fields['zip']);
            $cardCode = $this->Form->domId($fields['cardCode']);
            $form_id = $fields['form_id'];

            if (empty($payment['use_hosted'])) {
                if (empty($options['onclick'])) {
                    $onclick = 'sendPaymentDataToAnet()';
                    $options['onclick'] = $onclick;
                }
                else {
                    $onclick = $options['onclick'];
                }
                if ($this->_sandbox) {
                    $scriptUrl = 'https://jstest.authorize.net/v1/Accept.js';
                }
                else {
                    $scriptUrl = 'https://js.authorize.net/v1/Accept.js';
                }
                $this->Html->useScript($scriptUrl, [
                    'charset' => 'utf-8', 'type' => 'text/javascript',
                    'block'   => HtmlHelper::SCRIPT_BOTTOM,
                ]);
                $script = /** @lang JavaScript 1.8 */
                    <<<ON_CLICK_SCRIPT
function {$onclick} {
    var authData = {};
        authData.clientKey = "{$client_key}";
        authData.apiLoginID = "{$api_login}";
    var cardData = {};
        cardData.cardNumber = document.getElementById("{$cardNumber}").value;
        cardData.fullName = document.getElementById("{$fullName}").value;
        cardData.month = document.getElementById("{$month}").value;
        cardData.year = document.getElementById("{$year}").value;
        cardData.cardCode = document.getElementById("{$cardCode}").value;
        cardData.zip = document.getElementById("{$zip}").value;
        cardData.cardNumber=cardData.cardNumber.replace(/\D/g,'');
    // If using banking information instead of card information,
    // build a bankData object instead of a cardData object.
    //
    // var bankData = {};
    //     bankData.accountNumber = document.getElementById('accountNumber').value;
    //     bankData.routingNumber = document.getElementById('routingNumber').value;
    //     bankData.nameOnAccount = document.getElementById('nameOnAccount').value;
    //     bankData.accountType = document.getElementById('accountType').value;

    var secureData = {};
        secureData.authData = authData;
        secureData.cardData = cardData;
        // If using banking information instead of card information,
        // send the bankData object instead of the cardData object.
        //
        // secureData.bankData = bankData;

		Accept.dispatchData(secureData, responseHandler);
		function responseHandler(response) {
    if (response.messages.resultCode === "Error") {
        var i = 0;
        while (i < response.messages.message.length) {
            console.log(
                response.messages.message[i].code + ": " +
                response.messages.message[i].text
            );
            i = i + 1;
        }
    } else {
        paymentFormUpdate(response.opaqueData);
    }
}
}


function paymentFormUpdate(opaqueData) {
    document.getElementById("dataDescriptor").value = opaqueData.dataDescriptor;
    document.getElementById("dataValue").value = opaqueData.dataValue;

    document.getElementById("{$cardNumber}").value = "";
    document.getElementById("{$cardCode}").value = "";
    document.getElementById("{$form_id}").submit();
}
ON_CLICK_SCRIPT;
            }
            else {
                if ($this->_sandbox) {
                    $scriptUrl = 'https://jstest.authorize.net/v3/AcceptUI.js';
                }
                else {
                    $scriptUrl = 'https://js.authorize.net/v3/AcceptUI.js';
                }
                $this->Html->useScript($scriptUrl, [
                    'charset' => 'utf-8', 'type' => 'text/javascript',
                    'block'   => HtmlHelper::SCRIPT_BOTTOM,
                ]);
                $script = <<<HOSTED_SCRIPT
function responseHandler(response) {
    if (response.messages.resultCode === "Error") {
        var i = 0;
        while (i < response.messages.message.length) {
            console.log(
                response.messages.message[i].code + ": " +
                response.messages.message[i].text
            );
            i = i + 1;
        }
    } else {
        paymentFormUpdate(response.opaqueData);
    }
}
function paymentFormUpdate(opaqueData) {
    document.getElementById("dataDescriptor").value = opaqueData.dataDescriptor;
    document.getElementById("dataValue").value = opaqueData.dataValue;

    document.getElementById("{$cardNumber}").value = "";
    document.getElementById("{$cardCode}").value = "";
    document.getElementById("{$form_id}").submit();
}
HOSTED_SCRIPT;
                $options = $this->Html->injectClasses('AcceptUI', $options);
                $options['data-billingAddressOptions'] = '{\'show\':true, \'required\':false}';
                $options['data-apiLoginID'] = $api_login;
                $options['data-clientKey'] = $client_key;
                $options['data-acceptUIFormBtnTxt'] = "Submit Payment";
                $options['data-acceptUIFormHeaderTxt'] = "Card Information";
                $options['data-responseHandler'] = "responseHandler";

            }

            $this->Html->scriptBlock($script, [
                'charset' => 'utf-8', 'type' => 'text/javascript',
                'block'   => HtmlHelper::SCRIPT_BOTTOM,
            ]);
            $options['type'] = 'button';
            $dataFields = $this->Form->hidden('dataDescriptor',['name'=>'dataDescriptor','id'=>'dataDescriptor']) .
                $this->Form->hidden('dataValue',['name'=>'dataValue','id'=>'dataValue']);
            return $dataFields . $this->Form->button($title, $options);
        }

    }
